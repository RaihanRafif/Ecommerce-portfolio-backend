{
	"info": {
		"_postman_id": "1ca024dd-b51f-4b25-b910-eb13e53ff7fd",
		"name": "Portofolio-ecommerce",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11283393"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "Registration missing column",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has error message\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is descriptive\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.include.oneOf([\"\\\"lastName\\\" is required\", \"\\\"email\\\" must be a valid email\", \"\\\"password\\\" must be a string\"]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"John\",\r\n  \"email\": \"invalid-email\",\r\n  \"password\": 123 // Password is a number instead of a string\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/user/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"register"
							],
							"query": [
								{
									"key": "firstName",
									"value": "firstname",
									"disabled": true
								},
								{
									"key": "lastName",
									"value": "lastname",
									"disabled": true
								},
								{
									"key": "email",
									"value": "tes@gmail.com",
									"disabled": true
								},
								{
									"key": "password",
									"value": "password",
									"disabled": true
								},
								{
									"key": "isAdmin",
									"value": "5555",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Registration success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User registered successfully\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains user data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.user).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.user).to.have.property(\"firstName\", \"John\");\r",
									"    pm.expect(jsonData.user).to.have.property(\"lastName\", \"Doe\");\r",
									"    pm.expect(jsonData.user).to.have.property(\"email\", \"john.doe@example.com\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"John\",\r\n  \"lastName\": \"Doe\",\r\n  \"email\": \"john.doe@example.com\",\r\n  \"password\": \"Password123!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/user/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"register"
							],
							"query": [
								{
									"key": "firstName",
									"value": "firstname",
									"disabled": true
								},
								{
									"key": "lastName",
									"value": "lastname",
									"disabled": true
								},
								{
									"key": "email",
									"value": "tes@gmail.com",
									"disabled": true
								},
								{
									"key": "password",
									"value": "password",
									"disabled": true
								},
								{
									"key": "isAdmin",
									"value": "5555",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Registration user exist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has error message\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'User exists'\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.equal(\"User exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"John\",\r\n  \"lastName\": \"Doe\",\r\n  \"email\": \"john.doe@example.com\",\r\n  \"password\": \"Password123!\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/user/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"register"
							],
							"query": [
								{
									"key": "firstName",
									"value": "firstname",
									"disabled": true
								},
								{
									"key": "lastName",
									"value": "lastname",
									"disabled": true
								},
								{
									"key": "email",
									"value": "tes@gmail.com",
									"disabled": true
								},
								{
									"key": "password",
									"value": "password",
									"disabled": true
								},
								{
									"key": "isAdmin",
									"value": "5555",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Registration invalid email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has error message\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates invalid email format\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.equal(\"\\\"email\\\" must be a valid email\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"Alice\",\r\n  \"lastName\": \"Smith\",\r\n  \"email\": \"invalid-email\",  // Invalid email format\r\n  \"password\": \"Password123!\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/user/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"register"
							],
							"query": [
								{
									"key": "firstName",
									"value": "firstname",
									"disabled": true
								},
								{
									"key": "lastName",
									"value": "lastname",
									"disabled": true
								},
								{
									"key": "email",
									"value": "tes@gmail.com",
									"disabled": true
								},
								{
									"key": "password",
									"value": "password",
									"disabled": true
								},
								{
									"key": "isAdmin",
									"value": "5555",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Login invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has error message\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Invalid credentials'\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.equal(\"Invalid credentials\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"john.doe@example.com\",\r\n  \"password\": \"wrongpassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/user/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login account unregistered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has error message\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Invalid credentials'\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.equal(\"Invalid credentials\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"nonexistentuser@example.com\",  // An email that is not registered in the system\r\n  \"password\": \"SomePassword123!\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/user/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains token\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('token');\r",
									"    pm.expect(responseJson.token).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Token is not empty\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.token).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"john.doe@example.com\",\r\n  \"password\": \"Password123!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/user/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has error message\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates token is not valid\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.equal(\"Token is not valid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "invalid token",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"UpdatedFirstName\",\r\n  \"lastName\": \"UpdatedLastName\",\r\n  \"email\": \"updatedemail@example.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/user/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "user update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"    pm.expect(responseJson.message).to.equal('User updated successfully');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains updated user details\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('user');\r",
									"    pm.expect(responseJson.user).to.be.an('object');\r",
									"    \r",
									"    // Checking the basic fields\r",
									"    pm.expect(responseJson.user).to.have.property('id').that.is.a('number');\r",
									"    pm.expect(responseJson.user).to.have.property('firstName').that.equals('John');\r",
									"    pm.expect(responseJson.user).to.have.property('lastName').that.equals('Doe');\r",
									"    pm.expect(responseJson.user).to.have.property('email').that.equals('john.doe@example.com');\r",
									"\r",
									"    // Checking additional fields\r",
									"    pm.expect(responseJson.user).to.have.property('address').that.is.a('null');\r",
									"    pm.expect(responseJson.user).to.have.property('password').that.is.a('string');\r",
									"    pm.expect(responseJson.user).to.have.property('isAdmin').that.is.a('boolean');\r",
									"    pm.expect(responseJson.user).to.have.property('profilePhotoUrl').that.is.a('null');\r",
									"    pm.expect(responseJson.user).to.have.property('createdAt').that.is.a('string');\r",
									"    pm.expect(responseJson.user).to.have.property('updatedAt').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Password should be hashed\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    // Check if password is hashed (starts with $2a$ or $2b$ which is common for bcrypt)\r",
									"    pm.expect(responseJson.user.password).to.match(/^\\$2[abxy]\\$.{56}$/);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjo3LCJpc0FkbWluIjpmYWxzZX0sImlhdCI6MTcyNTQ0OTE0MywiZXhwIjoxNzI1NDUyNzQzfQ.WNhc6Iu2lkbOlXLMTMjuEFGSKgBn5hK_jTsCQ7RtktY",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"currentPassword\": \"OldPassword123!\",\r\n  \"newPassword\": \"NewPassword456!\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/user/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload photo profile invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has error message\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates token is not valid\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.equal(\"Token is not valid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "invalid token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "photo",
									"type": "file",
									"src": "/C:/Users/raiha/Downloads/WhatsApp Image 2024-08-22 at 5.31.04 PM.jpeg"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/user/profile-photo",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"profile-photo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload photo invalid format file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has error message\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates invalid photo format\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.equal(\"Invalid photo format\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjo3LCJpc0FkbWluIjpmYWxzZX0sImlhdCI6MTcyNTQ1MjcxNCwiZXhwIjoxNzI1NDU2MzE0fQ.LXe_oJBSVioKH-VbHgN0WIhrQ_0eXTKiPrkfBr5IAq8",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "photo",
									"type": "file",
									"src": "/C:/Users/raiha/Downloads/GREENCUT MACHINE Manual Instruction-Raihan (1).docx"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/user/profile-photo",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"profile-photo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload photo profile success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has success message\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"    pm.expect(responseJson.message).to.equal('Profile photo created successfully');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains profile photo details\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('profilePhoto');\r",
									"    pm.expect(responseJson.profilePhoto).to.have.property('userId').that.is.a('number');\r",
									"    pm.expect(responseJson.profilePhoto).to.have.property('photoUrl').that.is.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjo3LCJpc0FkbWluIjpmYWxzZX0sImlhdCI6MTcyNTQ1MjcxNCwiZXhwIjoxNzI1NDU2MzE0fQ.LXe_oJBSVioKH-VbHgN0WIhrQ_0eXTKiPrkfBr5IAq8",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "photo",
									"type": "file",
									"src": "/C:/Users/raiha/Downloads/WhatsApp_Image_2024-09-04_at_8.31.15_AM-removebg-preview.png"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/user/profile-photo",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"profile-photo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload photo more than 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has error message\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates profile photo already exists\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.equal(\"Profile photo already exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjo3LCJpc0FkbWluIjpmYWxzZX0sImlhdCI6MTcyNTQ1MjU5NCwiZXhwIjoxNzI1NDU2MTk0fQ.yz4xPzPGX9m6o6Cqg5gXPq9CWqyxsbDMAqOsEMjF330",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "photo",
									"type": "file",
									"src": "/C:/Users/raiha/Downloads/WhatsApp_Image_2024-09-04_at_8.31.15_AM-removebg-preview.png"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/user/profile-photo",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"profile-photo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get photo profile invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 for invalid token\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has error message for invalid token\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"    pm.expect(responseJson.message).to.equal('Token is not valid');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "invalid token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/user/profile-photo",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"profile-photo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get photo profile success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should have a Content-Type header for an image\", function () {\r",
									"    const contentType = pm.response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.include('image');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should not be empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjo3LCJpc0FkbWluIjpmYWxzZX0sImlhdCI6MTcyNTQ1MjcxNCwiZXhwIjoxNzI1NDU2MzE0fQ.LXe_oJBSVioKH-VbHgN0WIhrQ_0eXTKiPrkfBr5IAq8",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/user/profile-photo",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"profile-photo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update photo with invalid format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 for invalid photo format\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has error message for invalid photo format\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"    pm.expect(responseJson.message).to.equal('Invalid photo format');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjo3LCJpc0FkbWluIjpmYWxzZX0sImlhdCI6MTcyNTQ1MjcxNCwiZXhwIjoxNzI1NDU2MzE0fQ.LXe_oJBSVioKH-VbHgN0WIhrQ_0eXTKiPrkfBr5IAq8",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "photo",
									"type": "file",
									"src": "/C:/Users/raiha/Downloads/GREENCUT MACHINE Manual Instruction-Raihan.docx"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/user/profile-photo",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"profile-photo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update photo success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful photo update\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"    pm.expect(responseJson.message).to.equal('Profile photo updated successfully');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains updated profile photo data\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('profilePhoto');\r",
									"    pm.expect(responseJson.profilePhoto).to.have.property('photoUrl');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjo3LCJpc0FkbWluIjpmYWxzZX0sImlhdCI6MTcyNTQ1MjcxNCwiZXhwIjoxNzI1NDU2MzE0fQ.LXe_oJBSVioKH-VbHgN0WIhrQ_0eXTKiPrkfBr5IAq8",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "photo",
									"type": "file",
									"src": "/C:/Users/raiha/Downloads/WhatsApp_Image_2024-09-04_at_8.31.15_AM-removebg-preview.png"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/user/profile-photo",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"profile-photo"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete photo profile invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 for invalid token\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has error message for invalid token\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"    pm.expect(responseJson.message).to.equal('Token is not valid');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "invalid id",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/user/profile-photo",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"profile-photo"
							]
						}
					},
					"response": []
				},
				{
					"name": "user delete photo profile Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful photo deletion\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"    pm.expect(responseJson.message).to.equal('Profile photo deleted successfully');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjo3LCJpc0FkbWluIjpmYWxzZX0sImlhdCI6MTcyNTQ1MjcxNCwiZXhwIjoxNzI1NDU2MzE0fQ.LXe_oJBSVioKH-VbHgN0WIhrQ_0eXTKiPrkfBr5IAq8",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/user/profile-photo",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"profile-photo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "category",
			"item": [
				{
					"name": "post category",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJpc0FkbWluIjp0cnVlfSwiaWF0IjoxNzI0OTM2Mjg3LCJleHAiOjE3MjQ5Mzk4ODd9.pyEIlyas2_bDxT7oRcnZLBsSveqIjykI5DnXulGG6nQ",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"shirt\",\r\n  \"description\": \"A description for the new category\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/category",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"category"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all categories",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/category",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"category"
							]
						}
					},
					"response": []
				},
				{
					"name": "update category by id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJpc0FkbWluIjp0cnVlfSwiaWF0IjoxNzI0ODQ4NTkzLCJleHAiOjE3MjQ4NTIxOTN9.EwefBkaJVgn2RLfIslqddVQV-5UaRrAqtoMdhpXouUc",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Tie\",\r\n  \"description\": \"A description for the new category\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/category/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"category",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete category by id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJpc0FkbWluIjp0cnVlfSwiaWF0IjoxNzI0ODQ4NTkzLCJleHAiOjE3MjQ4NTIxOTN9.EwefBkaJVgn2RLfIslqddVQV-5UaRrAqtoMdhpXouUc",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/category/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"category",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "product",
			"item": [
				{
					"name": "create product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJpc0FkbWluIjp0cnVlfSwiaWF0IjoxNzI0OTM2Mjg3LCJleHAiOjE3MjQ5Mzk4ODd9.pyEIlyas2_bDxT7oRcnZLBsSveqIjykI5DnXulGG6nQ",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "photos",
									"type": "file",
									"src": [
										"/C:/Users/raiha/Downloads/new-profpic-wbg.png",
										"/C:/Users/raiha/Downloads/3941396558(1)-removebg-preview.jpg",
										"/C:/Users/raiha/Downloads/ems-4.jpg",
										"/C:/Users/raiha/Downloads/ems-3.jpg",
										"/C:/Users/raiha/Downloads/ems-2.jpg"
									]
								},
								{
									"key": "name",
									"value": "baru nih",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Product Description",
									"type": "text"
								},
								{
									"key": "price",
									"value": "49.99",
									"type": "text"
								},
								{
									"key": "categoryId",
									"value": "1",
									"type": "text"
								},
								{
									"key": "status",
									"value": "second",
									"type": "text"
								},
								{
									"key": "spesification",
									"value": "[{\"productSpesificId\":1,\"spesificDetailId\":3,\"price\":5000,\"stock\":2},{\"productSpesificId\":1,\"spesificDetailId\":2,\"price\":10000,\"stock\":4}]",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/product",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"product"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJpc0FkbWluIjp0cnVlfSwiaWF0IjoxNzI0OTgwMjY1LCJleHAiOjE3MjQ5ODM4NjV9.e2GTU-2wO2K_wzpX8XVXrsXrYklwY1qWNRY4jF-Zi10",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/product/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"product",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all products",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/product",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"product"
							]
						}
					},
					"response": []
				},
				{
					"name": "get product by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/product/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"product",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "wishlist",
			"item": [
				{
					"name": "create wishlist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJpc0FkbWluIjpmYWxzZX0sImlhdCI6MTcyNDk5ODEzMSwiZXhwIjoxNzI1MDAxNzMxfQ.fi6YQ3mJYupL9UW92ti5mNetKu5zvIYi4-IxxRtMFXQ",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"tess\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/user/wishlist",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"wishlist"
							]
						}
					},
					"response": []
				},
				{
					"name": "add Product to wishlist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJpc0FkbWluIjpmYWxzZX0sImlhdCI6MTcyNDk5ODEzMSwiZXhwIjoxNzI1MDAxNzMxfQ.fi6YQ3mJYupL9UW92ti5mNetKu5zvIYi4-IxxRtMFXQ",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productSpecificId\":1,\r\n    \"wishlistGroupName\":\"tess\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/user/wishlist/addProductToWishlist",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"wishlist",
								"addProductToWishlist"
							]
						}
					},
					"response": []
				},
				{
					"name": "get wishlist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJpc0FkbWluIjpmYWxzZX0sImlhdCI6MTcyNDk5ODEzMSwiZXhwIjoxNzI1MDAxNzMxfQ.fi6YQ3mJYupL9UW92ti5mNetKu5zvIYi4-IxxRtMFXQ",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/user/wishlist",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"wishlist"
							]
						}
					},
					"response": []
				},
				{
					"name": "update wishlist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJpc0FkbWluIjpmYWxzZX0sImlhdCI6MTcyNDk5ODEzMSwiZXhwIjoxNzI1MDAxNzMxfQ.fi6YQ3mJYupL9UW92ti5mNetKu5zvIYi4-IxxRtMFXQ",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"group 2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/user/wishlist/7",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"wishlist",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete product in wishlist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJpc0FkbWluIjpmYWxzZX0sImlhdCI6MTcyNDk5ODEzMSwiZXhwIjoxNzI1MDAxNzMxfQ.fi6YQ3mJYupL9UW92ti5mNetKu5zvIYi4-IxxRtMFXQ",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/user/wishlist/7/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"wishlist",
								"7",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete wishlist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJpc0FkbWluIjpmYWxzZX0sImlhdCI6MTcyNDk5ODEzMSwiZXhwIjoxNzI1MDAxNzMxfQ.fi6YQ3mJYupL9UW92ti5mNetKu5zvIYi4-IxxRtMFXQ",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/user/wishlist/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"wishlist",
								"6"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}